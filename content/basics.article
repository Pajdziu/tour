Pakiety, zmienne i funkcje.
Naucz się podstawowych komponentów każdego programu w Go.

Autorzy Go
https://golang.org

* Pakiety

Każdy program Go stworzony jest z pakietów.

Programy uruchamiają się w pakiecie `main` (ang. `główny`)

Ten program używa pakietów ze ścieżkami importu `"fmt"` oraz `"math/rand"`.

Tradycyjnie, nazwa pakietu jest taka sama jak ostatni składnik ścieżki importu. Przykładowo, pakiet `"math/rand"` zawiera pliki zaczynające się od instrukcji `package`rand`.

#appengine: *Uwaga:* Środowisko, w którym uruchamiane są programy jest
#appengine: deterministyczne, więc za każdym uruchomieniem programu
#appengine: `rand.Intn` zwróci tę samą liczbę.
#appengine:
#appengine: (Aby zobaczyć inną liczbę, przekaż do generatora ziarno; patrz [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].
#appengine: Czas w Go Playground nie zmienia się, więc należy użyć innej wartości jako ziarno.)

.play basics/packages.go

* Importowanie

Poniższy kod grupuje instrukcje importu w nawiasach, "zgrupowana" instrucja importu.

Możliwym jest również pisanie wielokrotnych instrukcji importu jak:

	import "fmt"
	import "math"

Za dobrą praktykę przyjęte jest jednak używanie zgrupowanej instrukcji importu.

.play basics/imports.go

* Eksportowanie nazw

W Go nazwa jest eksportowania jeśli zaczyna się wielką literą.
Przykładowo, `Pizza` jest wyeksportowaną nazwą, zarówno jak `Pi`, które jest
eksportowane z pakietu `math`.

`pizza` oraz `pi` nie zaczynają się wielką literą więc nie są eksportowane.

Importując paczkę można odwoływać sie tylko do wyeksportowanych nazw.
Jakakolwiek "niewyeksportowana" nazwa nie jest dostępna poza swoim pakietem.

Uruchom kod. Zwróć uwagę na wiadomość błędu.

Aby naprawić błąd, zmień `math.pi` na `math.Pi` i spróbuj ponownie.

.play basics/exported-names.go

* Funkcje

Funkcje mogą przyjmować zero lub więcej argumentów.

W tym przypadku, `add` (ang. `dodaj`) przyjmuje dwa parametry typu `int`.

Zauważ, że typ umieszczony jest _za_ nazwą zmiennej.

(Po więcej informacji dlaczego typy wyglądają jak wyglądają, przeczytaj [[https://blog.golang.org/gos-declaration-syntax][artykuł o składni deklarowania w Go]].)

.play basics/functions.go

* Funkcje (ciąg dalszy)

W przypadku gdy dwa lub więcej nazwane parametry fukcji współdzielą typ, możliwe jest ominięcie wszystkich deklaracji typów poza ostatnim.

Przykładowo skróciliśmy

	x int, y int

do

	x, y int

.play basics/functions-continued.go

* Zwracanie wielu wartości

Funkcja można zwrócić dowolną liczbę rezultatów.

Funkcja `swap` (ang. `zamień`) zwraca dwa ciągi znaków.

.play basics/multiple-results.go

* Nazwane wartości zwracane

Wartości zwracane w Go mogą być nazwane. W takim przypadku, traktowane są one jak zmienne zadeklarowanie na początku funkcji.

Nazwy te używane są dla udokumentowania znaczenia zwracanym wartościom.

Instrukcja `return` użyta bez argumentów zwraca wartości nazwane. Operacja taka znana jest jako "nagi" (ang. `naked`) return.

Naga instrukcja return powinna być używana tylko w zwięzłych funcjach, jak na przykładzie obok. Mogą one negatywnie wpłynąć na czytelność dłuższych fukcji.

.play basics/named-results.go

* Zmienne

Wyrażenie `var` deklaruje listę zmiennych; tak jak w przypadku argumentów funkcji, typ deklarowany jest jako ostatni.

Wyrażenie `var` może być zadeklarowane na poziomie pakietu lub funcji. Możemy zaobserwować obie deklaracje na przykładzie obok.

.play basics/variables.go

* Inicjowanie zmiennych

Wyrażenie var może zawierać jednoczesne przypisanie, jedną dla każdej zmiennej.

Jeżeli zmienna jest jednocześnie przypisywania, typ może zostać pominięty; zmienna przyjmie typ wartości inicjowanej.

.play basics/variables-with-initializers.go

* Skrócone inicjowanie zmiennych

Wewnątrz fukcji, skrócone przypisanie `:=` może zostać użyte zamiast deklaracji `var` z jawnym typem.

Poza funkcją, każda instrukcja zaczyna się od słowa kluczowego (`var, `func` itd.), stąd konstrukcja `:=` jest niedostępna.

.play basics/short-variable-declarations.go

* Podstawowe typy

Podstawowe typy w Go to

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias for uint8

	rune // alias for int32
	     // represents a Unicode code point

	float32 float64

	complex64 complex128

Przykład pokazuje użycie zmiennych o różnorodnych typach
oraz możliwość zgrupowania zmiennych we wspólny blok,
podobnie jak w przypadku importowania.

Typy `int`, `uint` oraz `uintptr` zazwyczaj są 32-bitowe na systemach 32-bitowych oraz 64-bitowe na systemach 64-bitowych.
Gdy potrzebny jest typ całkowitoliczbowy, powinno użyć się typu `int`, chyba że istnieją powody do użycia zmiennych o określonej długości lub bez bitu znaku. 

.play basics/basic-types.go

* Wartości zerowe


Do zmiennej zadeklarowanaj bez jawnej inicjalizacji przypisywana jest
_wartość_zerowa_ (ang. _zero_value_)

Wartość zerowa to:

- `0` dla typów numerycznych
- `false` dla typów boolowskich
- `""` dla ciągów znaków

.play basics/zero.go

* Konwersja typów

Wyrażenie `T(v)` rzutuje wartość `v` do typu `T`.

Przykłady przekształceń numerycznych:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Lub prościej:

	i := 42
	f := float64(i)
	u := uint(f)

W przeciwieństwie do C, przypisanie pomiędzy wartościami różnych typów wymagana jest
jawna konwersja.
Spróbuj usunąć rzutowanie do `float64` lub `uint` i zaobserwuj efekt.

.play basics/type-conversions.go

* Wnioskowanie typów

Deklarując zmienną bez sprecyzowania jawnego typu (czy to przez użycie składni `:=` czy `var =`), typ zmiennej jest wnioskowany (ang. `infer`) z wartości po prawej stronie wyrażenia.

W przypadku gdy wartość z prawej strony wyrażenia ma określony typ, nowa zmienna zachowa go.

	var i int
	j := i // j is an int

Jednak w przypadku gdy prawa strona wyrażenia zawiera stałą numeryczną bez określonego typu, nowa zmienna może być typu `int`, `float64` czy `complex128` w zależności od dokładności stałej.

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Spróbuj zmienić początkową wartość `v` w przykładowym kodzie i zaobserwuj jak wpłynęło to na typ zmiennej.

.play basics/type-inference.go

* Stałe

Stałe deklarowane są jak zmienne, z dodatkiem słowa kluczowego `const`.

Stałe mogą być pojedynczymi znakami, ciągami znaków, wartościami logicznymi czy numerycznymi.

Stałe nie mogą być zadeklarowane przy użyciu składni `:=`.

.play basics/constants.go

* Stałe numeryczne

Stałe numeryczne są wartościami o wysokiej precyzji.

Stała bez zadeklarowanego typu przyjmuje typ wymagany przez kontekst.

Spróbuj również wypisać `needInt(Big)`.

(Zmienna typu `int` może przechowywać maksymalnie 64-bitową liczbę całkowitą, czasami mniejszą.)

.play basics/numeric-constants.go

* Gratulacje!

Lekcja została ukończona!

Możesz cofnąć się do listy [[/list][modułów]] aby dowiedzieć się czego następnie się nauczyć lub kontynuuj z [[javascript:click('.next-page')][kolejną lekcją]].
